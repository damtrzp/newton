{"ast":null,"code":"var tokenType = require('./token-type');\n\nvar Lexer = require('./Lexer');\n\nvar ConstantNode = require('./node/ConstantNode');\n\nvar OperatorNode = require('./node/OperatorNode');\n\nvar UnaryNode = require('./node/UnaryNode');\n\nvar SymbolNode = require('./node/SymbolNode');\n\nvar FunctionNode = require('./node/FunctionNode');\n\nvar ArrayNode = require('./node/ArrayNode');\n\nvar ConditionalNode = require('./node/ConditionalNode');\n\nvar AssignmentNode = require('./node/AssignmentNode');\n\nvar BlockNode = require('./node/BlockNode');\n/**\n * Grammar DSL:\n *\n * program          : block (; block)*\n *\n * block            : assignment\n *\n * assignment       : ternary\n *                  | symbol `=` assignment\n *\n * ternary          : logicalOR\n *                  | logicalOR `?` ternary `:` ternary\n *\n * logicalOR        : logicalXOR\n *                  | logicalXOR (`||`,`or`) logicalOR\n *\n * logicalXOR       : logicalAND\n *                  : logicalAND `xor` logicalXOR\n *\n * logicalAND       : bitwiseOR\n *                  | bitwiseOR (`&&`,`and`) logicalAND\n *\n * bitwiseOR        : bitwiseXOR\n *                  | bitwiseXOR `|` bitwiseOR\n *\n * bitwiseXOR       : bitwiseAND\n *                  | bitwiseAND `^|` bitwiseXOR\n *\n * bitwiseAND       : relational\n *                  | relational `&` bitwiseAND\n *\n * relational       : shift\n *                  | shift (`!=` | `==` | `>` | '<' | '<=' |'>=') shift)\n *\n * shift            : additive\n *                  | additive (`>>` | `<<` | `>>>`) shift\n *\n * additive         : multiplicative\n *                  | multiplicative (`+` | `-`) additive\n *\n * multiplicative   : unary\n *                  | unary (`*` | `/` | `%`) unary\n *                  | unary symbol\n *\n * unary            : pow\n *                  | (`-` | `+` | `~`) unary\n *\n * pow              : factorial\n *                  | factorial (`^`, '**') unary\n *\n * factorial        : symbol\n *                  | symbol (`!`)\n *\n * symbol           : symbolToken\n *                  | symbolToken functionCall\n *                  | string\n *\n * functionCall     : `(` `)`\n *                  | `(` ternary (, ternary)* `)`\n *\n * string           : `'` (character)* `'`\n *                  : `\"` (character)* `\"`\n *                  | array\n *\n * array            : `[` `]`\n *                  | `[` assignment (, assignment)* `]`\n *                  | number\n *\n * number           : number-token\n *                  | parentheses\n *\n * parentheses      : `(` assignment `)`\n *                  : end\n *\n * end              : NULL\n *\n * @param {[type]} lexer [description]\n */\n\n\nfunction Parser() {\n  this.lexer = new Lexer();\n  this.tokens = null;\n}\n\nParser.prototype.current = function () {\n  return this.tokens[0];\n};\n\nParser.prototype.next = function () {\n  return this.tokens[1];\n};\n\nParser.prototype.peek = function () {\n  if (this.tokens.length) {\n    var first = this.tokens[0];\n\n    for (var i = 0; i < arguments.length; i += 1) {\n      if (first.value === arguments[i]) {\n        return true;\n      }\n    }\n  }\n};\n\nParser.prototype.consume = function (e) {\n  return this.tokens.shift();\n};\n\nParser.prototype.expect = function (e) {\n  if (!this.peek(e)) {\n    throw Error('expected ' + e);\n  }\n\n  return this.consume();\n};\n\nParser.prototype.isEOF = function () {\n  return this.current().type === tokenType.EOF;\n};\n\nParser.prototype.parse = function (text) {\n  this.tokens = this.lexer.lex(text);\n  return this.program();\n};\n\nParser.prototype.program = function () {\n  var blocks = [];\n\n  while (!this.isEOF()) {\n    blocks.push(this.assignment());\n\n    if (this.peek(';')) {\n      this.consume();\n    }\n  }\n\n  this.end();\n  return new BlockNode(blocks);\n};\n\nParser.prototype.assignment = function () {\n  var left = this.ternary();\n\n  if (left instanceof SymbolNode && this.peek('=')) {\n    this.consume();\n    return new AssignmentNode(left.name, this.assignment());\n  }\n\n  return left;\n};\n\nParser.prototype.ternary = function () {\n  var predicate = this.logicalOR();\n\n  if (this.peek('?')) {\n    this.consume();\n    var truthy = this.ternary();\n    this.expect(':');\n    var falsy = this.ternary();\n    return new ConditionalNode(predicate, truthy, falsy);\n  }\n\n  return predicate;\n};\n\nParser.prototype.logicalOR = function () {\n  var left = this.logicalXOR();\n\n  if (this.peek('||')) {\n    var op = this.consume();\n    var right = this.logicalOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.logicalXOR = function () {\n  var left = this.logicalAND();\n\n  if (this.current().value === 'xor') {\n    var op = this.consume();\n    var right = this.logicalXOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.logicalAND = function () {\n  var left = this.bitwiseOR();\n\n  if (this.peek('&&')) {\n    var op = this.consume();\n    var right = this.logicalAND();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.bitwiseOR = function () {\n  var left = this.bitwiseXOR();\n\n  if (this.peek('|')) {\n    var op = this.consume();\n    var right = this.bitwiseOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.bitwiseXOR = function () {\n  var left = this.bitwiseAND();\n\n  if (this.peek('^|')) {\n    var op = this.consume();\n    var right = this.bitwiseXOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.bitwiseAND = function () {\n  var left = this.relational();\n\n  if (this.peek('&')) {\n    var op = this.consume();\n    var right = this.bitwiseAND();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.relational = function () {\n  var left = this.shift();\n\n  if (this.peek('==', '===', '!=', '!==', '>=', '<=', '>', '<')) {\n    var op = this.consume();\n    var right = this.shift();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.shift = function () {\n  var left = this.additive();\n\n  if (this.peek('>>', '<<', '>>>')) {\n    var op = this.consume();\n    var right = this.shift();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.additive = function () {\n  var left = this.multiplicative();\n\n  while (this.peek('+', '-')) {\n    var op = this.consume();\n    left = new OperatorNode(op.value, [left, this.multiplicative()]);\n  }\n\n  return left;\n};\n\nParser.prototype.multiplicative = function () {\n  var op, right;\n  var left = this.unary();\n\n  while (this.peek('*', '/', '%')) {\n    op = this.consume();\n    left = new OperatorNode(op.value, [left, this.unary()]);\n  } // implicit multiplication\n  // - 2 x\n  // - 2(x)\n  // - (2)2\n\n\n  if (this.current().type === tokenType.SYMBOL || this.peek('(') || !(left.type instanceof ConstantNode) && this.current().type === tokenType.NUMBER) {\n    right = this.multiplicative();\n    return new OperatorNode('*', [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.unary = function () {\n  if (this.peek('-', '+', '~')) {\n    var op = this.consume();\n    var right = this.unary();\n    return new UnaryNode(op.value, right);\n  }\n\n  return this.pow();\n};\n\nParser.prototype.pow = function () {\n  var left = this.factorial();\n\n  if (this.peek('^', '**')) {\n    var op = this.consume();\n    var right = this.unary();\n    return new OperatorNode(op.value, [left, right]);\n  }\n\n  return left;\n};\n\nParser.prototype.factorial = function () {\n  var left = this.symbol();\n\n  if (this.peek('!')) {\n    var op = this.consume();\n    return new OperatorNode(op.value, [left]);\n  }\n\n  return left;\n};\n\nParser.prototype.symbol = function () {\n  var current = this.current();\n\n  if (current.type === tokenType.SYMBOL) {\n    var symbol = this.consume();\n    var node = this.functionCall(symbol);\n    return node;\n  }\n\n  return this.string();\n};\n\nParser.prototype.functionCall = function (symbolToken) {\n  var name = symbolToken.value;\n\n  if (this.peek('(')) {\n    this.consume();\n    var params = [];\n\n    while (!this.peek(')') && !this.isEOF()) {\n      params.push(this.assignment());\n\n      if (this.peek(',')) {\n        this.consume();\n      }\n    }\n\n    this.expect(')');\n    return new FunctionNode(name, params);\n  }\n\n  return new SymbolNode(name);\n};\n\nParser.prototype.string = function () {\n  if (this.current().type === tokenType.STRING) {\n    return new ConstantNode(this.consume().value, 'string');\n  }\n\n  return this.array();\n};\n\nParser.prototype.array = function () {\n  if (this.peek('[')) {\n    this.consume();\n    var params = [];\n\n    while (!this.peek(']') && !this.isEOF()) {\n      params.push(this.assignment());\n\n      if (this.peek(',')) {\n        this.consume();\n      }\n    }\n\n    this.expect(']');\n    return new ArrayNode(params);\n  }\n\n  return this.number();\n};\n\nParser.prototype.number = function () {\n  var token = this.current();\n\n  if (token.type === tokenType.NUMBER) {\n    return new ConstantNode(this.consume().value, 'number');\n  }\n\n  return this.parentheses();\n};\n\nParser.prototype.parentheses = function () {\n  var token = this.current();\n\n  if (token.value === '(') {\n    this.consume();\n    var left = this.assignment();\n    this.expect(')');\n    return left;\n  }\n\n  return this.end();\n};\n\nParser.prototype.end = function () {\n  var token = this.current();\n\n  if (token.type !== tokenType.EOF) {\n    throw Error('unexpected end of expression');\n  }\n};\n\nmodule.exports = Parser;","map":{"version":3,"names":["tokenType","require","Lexer","ConstantNode","OperatorNode","UnaryNode","SymbolNode","FunctionNode","ArrayNode","ConditionalNode","AssignmentNode","BlockNode","Parser","lexer","tokens","prototype","current","next","peek","length","first","i","arguments","value","consume","e","shift","expect","Error","isEOF","type","EOF","parse","text","lex","program","blocks","push","assignment","end","left","ternary","name","predicate","logicalOR","truthy","falsy","logicalXOR","op","right","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","relational","additive","multiplicative","unary","SYMBOL","NUMBER","pow","factorial","symbol","node","functionCall","string","symbolToken","params","STRING","array","number","token","parentheses","module","exports"],"sources":["/home/programowanie/newton-rhapson/newton/node_modules/mr-parser/lib/Parser.js"],"sourcesContent":["var tokenType = require('./token-type')\n\nvar Lexer = require('./Lexer')\nvar ConstantNode = require('./node/ConstantNode')\nvar OperatorNode = require('./node/OperatorNode')\nvar UnaryNode = require('./node/UnaryNode')\nvar SymbolNode = require('./node/SymbolNode')\nvar FunctionNode = require('./node/FunctionNode')\nvar ArrayNode = require('./node/ArrayNode')\nvar ConditionalNode = require('./node/ConditionalNode')\nvar AssignmentNode = require('./node/AssignmentNode')\nvar BlockNode = require('./node/BlockNode')\n\n/**\n * Grammar DSL:\n *\n * program          : block (; block)*\n *\n * block            : assignment\n *\n * assignment       : ternary\n *                  | symbol `=` assignment\n *\n * ternary          : logicalOR\n *                  | logicalOR `?` ternary `:` ternary\n *\n * logicalOR        : logicalXOR\n *                  | logicalXOR (`||`,`or`) logicalOR\n *\n * logicalXOR       : logicalAND\n *                  : logicalAND `xor` logicalXOR\n *\n * logicalAND       : bitwiseOR\n *                  | bitwiseOR (`&&`,`and`) logicalAND\n *\n * bitwiseOR        : bitwiseXOR\n *                  | bitwiseXOR `|` bitwiseOR\n *\n * bitwiseXOR       : bitwiseAND\n *                  | bitwiseAND `^|` bitwiseXOR\n *\n * bitwiseAND       : relational\n *                  | relational `&` bitwiseAND\n *\n * relational       : shift\n *                  | shift (`!=` | `==` | `>` | '<' | '<=' |'>=') shift)\n *\n * shift            : additive\n *                  | additive (`>>` | `<<` | `>>>`) shift\n *\n * additive         : multiplicative\n *                  | multiplicative (`+` | `-`) additive\n *\n * multiplicative   : unary\n *                  | unary (`*` | `/` | `%`) unary\n *                  | unary symbol\n *\n * unary            : pow\n *                  | (`-` | `+` | `~`) unary\n *\n * pow              : factorial\n *                  | factorial (`^`, '**') unary\n *\n * factorial        : symbol\n *                  | symbol (`!`)\n *\n * symbol           : symbolToken\n *                  | symbolToken functionCall\n *                  | string\n *\n * functionCall     : `(` `)`\n *                  | `(` ternary (, ternary)* `)`\n *\n * string           : `'` (character)* `'`\n *                  : `\"` (character)* `\"`\n *                  | array\n *\n * array            : `[` `]`\n *                  | `[` assignment (, assignment)* `]`\n *                  | number\n *\n * number           : number-token\n *                  | parentheses\n *\n * parentheses      : `(` assignment `)`\n *                  : end\n *\n * end              : NULL\n *\n * @param {[type]} lexer [description]\n */\nfunction Parser () {\n  this.lexer = new Lexer()\n  this.tokens = null\n}\n\nParser.prototype.current = function () {\n  return this.tokens[0]\n}\n\nParser.prototype.next = function () {\n  return this.tokens[1]\n}\n\nParser.prototype.peek = function () {\n  if (this.tokens.length) {\n    var first = this.tokens[0]\n    for (var i = 0; i < arguments.length; i += 1) {\n      if (first.value === arguments[i]) {\n        return true\n      }\n    }\n  }\n}\n\nParser.prototype.consume = function (e) {\n  return this.tokens.shift()\n}\n\nParser.prototype.expect = function (e) {\n  if (!this.peek(e)) {\n    throw Error('expected ' + e)\n  }\n  return this.consume()\n}\n\nParser.prototype.isEOF = function () {\n  return this.current().type === tokenType.EOF\n}\n\nParser.prototype.parse = function (text) {\n  this.tokens = this.lexer.lex(text)\n  return this.program()\n}\n\nParser.prototype.program = function () {\n  var blocks = []\n  while (!this.isEOF()) {\n    blocks.push(this.assignment())\n    if (this.peek(';')) {\n      this.consume()\n    }\n  }\n  this.end()\n  return new BlockNode(blocks)\n}\n\nParser.prototype.assignment = function () {\n  var left = this.ternary()\n  if (left instanceof SymbolNode && this.peek('=')) {\n    this.consume()\n    return new AssignmentNode(left.name, this.assignment())\n  }\n  return left\n}\n\nParser.prototype.ternary = function () {\n  var predicate = this.logicalOR()\n  if (this.peek('?')) {\n    this.consume()\n    var truthy = this.ternary()\n    this.expect(':')\n    var falsy = this.ternary()\n    return new ConditionalNode(predicate, truthy, falsy)\n  }\n  return predicate\n}\n\nParser.prototype.logicalOR = function () {\n  var left = this.logicalXOR()\n  if (this.peek('||')) {\n    var op = this.consume()\n    var right = this.logicalOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.logicalXOR = function () {\n  var left = this.logicalAND()\n  if (this.current().value === 'xor') {\n    var op = this.consume()\n    var right = this.logicalXOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.logicalAND = function () {\n  var left = this.bitwiseOR()\n  if (this.peek('&&')) {\n    var op = this.consume()\n    var right = this.logicalAND()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.bitwiseOR = function () {\n  var left = this.bitwiseXOR()\n  if (this.peek('|')) {\n    var op = this.consume()\n    var right = this.bitwiseOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.bitwiseXOR = function () {\n  var left = this.bitwiseAND()\n  if (this.peek('^|')) {\n    var op = this.consume()\n    var right = this.bitwiseXOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.bitwiseAND = function () {\n  var left = this.relational()\n  if (this.peek('&')) {\n    var op = this.consume()\n    var right = this.bitwiseAND()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.relational = function () {\n  var left = this.shift()\n  if (this.peek('==', '===', '!=', '!==', '>=', '<=', '>', '<')) {\n    var op = this.consume()\n    var right = this.shift()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.shift = function () {\n  var left = this.additive()\n  if (this.peek('>>', '<<', '>>>')) {\n    var op = this.consume()\n    var right = this.shift()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.additive = function () {\n  var left = this.multiplicative()\n  while (this.peek('+', '-')) {\n    var op = this.consume()\n    left = new OperatorNode(op.value, [left, this.multiplicative()])\n  }\n  return left\n}\n\nParser.prototype.multiplicative = function () {\n  var op, right\n  var left = this.unary()\n  while (this.peek('*', '/', '%')) {\n    op = this.consume()\n    left = new OperatorNode(op.value, [left, this.unary()])\n  }\n\n  // implicit multiplication\n  // - 2 x\n  // - 2(x)\n  // - (2)2\n  if (this.current().type === tokenType.SYMBOL ||\n      this.peek('(') ||\n      (!(left.type instanceof ConstantNode) && this.current().type === tokenType.NUMBER)\n      ) {\n    right = this.multiplicative()\n    return new OperatorNode('*', [left, right])\n  }\n\n  return left\n}\n\nParser.prototype.unary = function () {\n  if (this.peek('-', '+', '~')) {\n    var op = this.consume()\n    var right = this.unary()\n    return new UnaryNode(op.value, right)\n  }\n  return this.pow()\n}\n\nParser.prototype.pow = function () {\n  var left = this.factorial()\n  if (this.peek('^', '**')) {\n    var op = this.consume()\n    var right = this.unary()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.factorial = function () {\n  var left = this.symbol()\n  if (this.peek('!')) {\n    var op = this.consume()\n    return new OperatorNode(op.value, [left])\n  }\n  return left\n}\n\nParser.prototype.symbol = function () {\n  var current = this.current()\n  if (current.type === tokenType.SYMBOL) {\n    var symbol = this.consume()\n    var node = this.functionCall(symbol)\n    return node\n  }\n  return this.string()\n}\n\nParser.prototype.functionCall = function (symbolToken) {\n  var name = symbolToken.value\n  if (this.peek('(')) {\n    this.consume()\n    var params = []\n    while (!this.peek(')') && !this.isEOF()) {\n      params.push(this.assignment())\n      if (this.peek(',')) {\n        this.consume()\n      }\n    }\n    this.expect(')')\n    return new FunctionNode(name, params)\n  }\n  return new SymbolNode(name)\n}\n\nParser.prototype.string = function () {\n  if (this.current().type === tokenType.STRING) {\n    return new ConstantNode(this.consume().value, 'string')\n  }\n  return this.array()\n}\n\nParser.prototype.array = function () {\n  if (this.peek('[')) {\n    this.consume()\n    var params = []\n    while (!this.peek(']') && !this.isEOF()) {\n      params.push(this.assignment())\n      if (this.peek(',')) {\n        this.consume()\n      }\n    }\n    this.expect(']')\n    return new ArrayNode(params)\n  }\n  return this.number()\n}\n\nParser.prototype.number = function () {\n  var token = this.current()\n  if (token.type === tokenType.NUMBER) {\n    return new ConstantNode(this.consume().value, 'number')\n  }\n  return this.parentheses()\n}\n\nParser.prototype.parentheses = function () {\n  var token = this.current()\n  if (token.value === '(') {\n    this.consume()\n    var left = this.assignment()\n    this.expect(')')\n    return left\n  }\n  return this.end()\n}\n\nParser.prototype.end = function () {\n  var token = this.current()\n  if (token.type !== tokenType.EOF) {\n    throw Error('unexpected end of expression')\n  }\n}\n\nmodule.exports = Parser\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAIK,UAAU,GAAGL,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAIM,YAAY,GAAGN,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAIQ,eAAe,GAAGR,OAAO,CAAC,wBAAD,CAA7B;;AACA,IAAIS,cAAc,GAAGT,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAIU,SAAS,GAAGV,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,MAAT,GAAmB;EACjB,KAAKC,KAAL,GAAa,IAAIX,KAAJ,EAAb;EACA,KAAKY,MAAL,GAAc,IAAd;AACD;;AAEDF,MAAM,CAACG,SAAP,CAAiBC,OAAjB,GAA2B,YAAY;EACrC,OAAO,KAAKF,MAAL,CAAY,CAAZ,CAAP;AACD,CAFD;;AAIAF,MAAM,CAACG,SAAP,CAAiBE,IAAjB,GAAwB,YAAY;EAClC,OAAO,KAAKH,MAAL,CAAY,CAAZ,CAAP;AACD,CAFD;;AAIAF,MAAM,CAACG,SAAP,CAAiBG,IAAjB,GAAwB,YAAY;EAClC,IAAI,KAAKJ,MAAL,CAAYK,MAAhB,EAAwB;IACtB,IAAIC,KAAK,GAAG,KAAKN,MAAL,CAAY,CAAZ,CAAZ;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACH,MAA9B,EAAsCE,CAAC,IAAI,CAA3C,EAA8C;MAC5C,IAAID,KAAK,CAACG,KAAN,KAAgBD,SAAS,CAACD,CAAD,CAA7B,EAAkC;QAChC,OAAO,IAAP;MACD;IACF;EACF;AACF,CATD;;AAWAT,MAAM,CAACG,SAAP,CAAiBS,OAAjB,GAA2B,UAAUC,CAAV,EAAa;EACtC,OAAO,KAAKX,MAAL,CAAYY,KAAZ,EAAP;AACD,CAFD;;AAIAd,MAAM,CAACG,SAAP,CAAiBY,MAAjB,GAA0B,UAAUF,CAAV,EAAa;EACrC,IAAI,CAAC,KAAKP,IAAL,CAAUO,CAAV,CAAL,EAAmB;IACjB,MAAMG,KAAK,CAAC,cAAcH,CAAf,CAAX;EACD;;EACD,OAAO,KAAKD,OAAL,EAAP;AACD,CALD;;AAOAZ,MAAM,CAACG,SAAP,CAAiBc,KAAjB,GAAyB,YAAY;EACnC,OAAO,KAAKb,OAAL,GAAec,IAAf,KAAwB9B,SAAS,CAAC+B,GAAzC;AACD,CAFD;;AAIAnB,MAAM,CAACG,SAAP,CAAiBiB,KAAjB,GAAyB,UAAUC,IAAV,EAAgB;EACvC,KAAKnB,MAAL,GAAc,KAAKD,KAAL,CAAWqB,GAAX,CAAeD,IAAf,CAAd;EACA,OAAO,KAAKE,OAAL,EAAP;AACD,CAHD;;AAKAvB,MAAM,CAACG,SAAP,CAAiBoB,OAAjB,GAA2B,YAAY;EACrC,IAAIC,MAAM,GAAG,EAAb;;EACA,OAAO,CAAC,KAAKP,KAAL,EAAR,EAAsB;IACpBO,MAAM,CAACC,IAAP,CAAY,KAAKC,UAAL,EAAZ;;IACA,IAAI,KAAKpB,IAAL,CAAU,GAAV,CAAJ,EAAoB;MAClB,KAAKM,OAAL;IACD;EACF;;EACD,KAAKe,GAAL;EACA,OAAO,IAAI5B,SAAJ,CAAcyB,MAAd,CAAP;AACD,CAVD;;AAYAxB,MAAM,CAACG,SAAP,CAAiBuB,UAAjB,GAA8B,YAAY;EACxC,IAAIE,IAAI,GAAG,KAAKC,OAAL,EAAX;;EACA,IAAID,IAAI,YAAYlC,UAAhB,IAA8B,KAAKY,IAAL,CAAU,GAAV,CAAlC,EAAkD;IAChD,KAAKM,OAAL;IACA,OAAO,IAAId,cAAJ,CAAmB8B,IAAI,CAACE,IAAxB,EAA8B,KAAKJ,UAAL,EAA9B,CAAP;EACD;;EACD,OAAOE,IAAP;AACD,CAPD;;AASA5B,MAAM,CAACG,SAAP,CAAiB0B,OAAjB,GAA2B,YAAY;EACrC,IAAIE,SAAS,GAAG,KAAKC,SAAL,EAAhB;;EACA,IAAI,KAAK1B,IAAL,CAAU,GAAV,CAAJ,EAAoB;IAClB,KAAKM,OAAL;IACA,IAAIqB,MAAM,GAAG,KAAKJ,OAAL,EAAb;IACA,KAAKd,MAAL,CAAY,GAAZ;IACA,IAAImB,KAAK,GAAG,KAAKL,OAAL,EAAZ;IACA,OAAO,IAAIhC,eAAJ,CAAoBkC,SAApB,EAA+BE,MAA/B,EAAuCC,KAAvC,CAAP;EACD;;EACD,OAAOH,SAAP;AACD,CAVD;;AAYA/B,MAAM,CAACG,SAAP,CAAiB6B,SAAjB,GAA6B,YAAY;EACvC,IAAIJ,IAAI,GAAG,KAAKO,UAAL,EAAX;;EACA,IAAI,KAAK7B,IAAL,CAAU,IAAV,CAAJ,EAAqB;IACnB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKL,SAAL,EAAZ;IACA,OAAO,IAAIxC,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBgC,UAAjB,GAA8B,YAAY;EACxC,IAAIP,IAAI,GAAG,KAAKU,UAAL,EAAX;;EACA,IAAI,KAAKlC,OAAL,GAAeO,KAAf,KAAyB,KAA7B,EAAoC;IAClC,IAAIyB,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKF,UAAL,EAAZ;IACA,OAAO,IAAI3C,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBmC,UAAjB,GAA8B,YAAY;EACxC,IAAIV,IAAI,GAAG,KAAKW,SAAL,EAAX;;EACA,IAAI,KAAKjC,IAAL,CAAU,IAAV,CAAJ,EAAqB;IACnB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKC,UAAL,EAAZ;IACA,OAAO,IAAI9C,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBoC,SAAjB,GAA6B,YAAY;EACvC,IAAIX,IAAI,GAAG,KAAKY,UAAL,EAAX;;EACA,IAAI,KAAKlC,IAAL,CAAU,GAAV,CAAJ,EAAoB;IAClB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKE,SAAL,EAAZ;IACA,OAAO,IAAI/C,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBqC,UAAjB,GAA8B,YAAY;EACxC,IAAIZ,IAAI,GAAG,KAAKa,UAAL,EAAX;;EACA,IAAI,KAAKnC,IAAL,CAAU,IAAV,CAAJ,EAAqB;IACnB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKG,UAAL,EAAZ;IACA,OAAO,IAAIhD,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBsC,UAAjB,GAA8B,YAAY;EACxC,IAAIb,IAAI,GAAG,KAAKc,UAAL,EAAX;;EACA,IAAI,KAAKpC,IAAL,CAAU,GAAV,CAAJ,EAAoB;IAClB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKI,UAAL,EAAZ;IACA,OAAO,IAAIjD,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBuC,UAAjB,GAA8B,YAAY;EACxC,IAAId,IAAI,GAAG,KAAKd,KAAL,EAAX;;EACA,IAAI,KAAKR,IAAL,CAAU,IAAV,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,GAAhD,EAAqD,GAArD,CAAJ,EAA+D;IAC7D,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKvB,KAAL,EAAZ;IACA,OAAO,IAAItB,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBW,KAAjB,GAAyB,YAAY;EACnC,IAAIc,IAAI,GAAG,KAAKe,QAAL,EAAX;;EACA,IAAI,KAAKrC,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,KAAtB,CAAJ,EAAkC;IAChC,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKvB,KAAL,EAAZ;IACA,OAAO,IAAItB,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiBwC,QAAjB,GAA4B,YAAY;EACtC,IAAIf,IAAI,GAAG,KAAKgB,cAAL,EAAX;;EACA,OAAO,KAAKtC,IAAL,CAAU,GAAV,EAAe,GAAf,CAAP,EAA4B;IAC1B,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACAgB,IAAI,GAAG,IAAIpC,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAO,KAAKgB,cAAL,EAAP,CAA3B,CAAP;EACD;;EACD,OAAOhB,IAAP;AACD,CAPD;;AASA5B,MAAM,CAACG,SAAP,CAAiByC,cAAjB,GAAkC,YAAY;EAC5C,IAAIR,EAAJ,EAAQC,KAAR;EACA,IAAIT,IAAI,GAAG,KAAKiB,KAAL,EAAX;;EACA,OAAO,KAAKvC,IAAL,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAP,EAAiC;IAC/B8B,EAAE,GAAG,KAAKxB,OAAL,EAAL;IACAgB,IAAI,GAAG,IAAIpC,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAO,KAAKiB,KAAL,EAAP,CAA3B,CAAP;EACD,CAN2C,CAQ5C;EACA;EACA;EACA;;;EACA,IAAI,KAAKzC,OAAL,GAAec,IAAf,KAAwB9B,SAAS,CAAC0D,MAAlC,IACA,KAAKxC,IAAL,CAAU,GAAV,CADA,IAEC,EAAEsB,IAAI,CAACV,IAAL,YAAqB3B,YAAvB,KAAwC,KAAKa,OAAL,GAAec,IAAf,KAAwB9B,SAAS,CAAC2D,MAF/E,EAGM;IACJV,KAAK,GAAG,KAAKO,cAAL,EAAR;IACA,OAAO,IAAIpD,YAAJ,CAAiB,GAAjB,EAAsB,CAACoC,IAAD,EAAOS,KAAP,CAAtB,CAAP;EACD;;EAED,OAAOT,IAAP;AACD,CArBD;;AAuBA5B,MAAM,CAACG,SAAP,CAAiB0C,KAAjB,GAAyB,YAAY;EACnC,IAAI,KAAKvC,IAAL,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAJ,EAA8B;IAC5B,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKQ,KAAL,EAAZ;IACA,OAAO,IAAIpD,SAAJ,CAAc2C,EAAE,CAACzB,KAAjB,EAAwB0B,KAAxB,CAAP;EACD;;EACD,OAAO,KAAKW,GAAL,EAAP;AACD,CAPD;;AASAhD,MAAM,CAACG,SAAP,CAAiB6C,GAAjB,GAAuB,YAAY;EACjC,IAAIpB,IAAI,GAAG,KAAKqB,SAAL,EAAX;;EACA,IAAI,KAAK3C,IAAL,CAAU,GAAV,EAAe,IAAf,CAAJ,EAA0B;IACxB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,IAAIyB,KAAK,GAAG,KAAKQ,KAAL,EAAZ;IACA,OAAO,IAAIrD,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,EAAOS,KAAP,CAA3B,CAAP;EACD;;EACD,OAAOT,IAAP;AACD,CARD;;AAUA5B,MAAM,CAACG,SAAP,CAAiB8C,SAAjB,GAA6B,YAAY;EACvC,IAAIrB,IAAI,GAAG,KAAKsB,MAAL,EAAX;;EACA,IAAI,KAAK5C,IAAL,CAAU,GAAV,CAAJ,EAAoB;IAClB,IAAI8B,EAAE,GAAG,KAAKxB,OAAL,EAAT;IACA,OAAO,IAAIpB,YAAJ,CAAiB4C,EAAE,CAACzB,KAApB,EAA2B,CAACiB,IAAD,CAA3B,CAAP;EACD;;EACD,OAAOA,IAAP;AACD,CAPD;;AASA5B,MAAM,CAACG,SAAP,CAAiB+C,MAAjB,GAA0B,YAAY;EACpC,IAAI9C,OAAO,GAAG,KAAKA,OAAL,EAAd;;EACA,IAAIA,OAAO,CAACc,IAAR,KAAiB9B,SAAS,CAAC0D,MAA/B,EAAuC;IACrC,IAAII,MAAM,GAAG,KAAKtC,OAAL,EAAb;IACA,IAAIuC,IAAI,GAAG,KAAKC,YAAL,CAAkBF,MAAlB,CAAX;IACA,OAAOC,IAAP;EACD;;EACD,OAAO,KAAKE,MAAL,EAAP;AACD,CARD;;AAUArD,MAAM,CAACG,SAAP,CAAiBiD,YAAjB,GAAgC,UAAUE,WAAV,EAAuB;EACrD,IAAIxB,IAAI,GAAGwB,WAAW,CAAC3C,KAAvB;;EACA,IAAI,KAAKL,IAAL,CAAU,GAAV,CAAJ,EAAoB;IAClB,KAAKM,OAAL;IACA,IAAI2C,MAAM,GAAG,EAAb;;IACA,OAAO,CAAC,KAAKjD,IAAL,CAAU,GAAV,CAAD,IAAmB,CAAC,KAAKW,KAAL,EAA3B,EAAyC;MACvCsC,MAAM,CAAC9B,IAAP,CAAY,KAAKC,UAAL,EAAZ;;MACA,IAAI,KAAKpB,IAAL,CAAU,GAAV,CAAJ,EAAoB;QAClB,KAAKM,OAAL;MACD;IACF;;IACD,KAAKG,MAAL,CAAY,GAAZ;IACA,OAAO,IAAIpB,YAAJ,CAAiBmC,IAAjB,EAAuByB,MAAvB,CAAP;EACD;;EACD,OAAO,IAAI7D,UAAJ,CAAeoC,IAAf,CAAP;AACD,CAfD;;AAiBA9B,MAAM,CAACG,SAAP,CAAiBkD,MAAjB,GAA0B,YAAY;EACpC,IAAI,KAAKjD,OAAL,GAAec,IAAf,KAAwB9B,SAAS,CAACoE,MAAtC,EAA8C;IAC5C,OAAO,IAAIjE,YAAJ,CAAiB,KAAKqB,OAAL,GAAeD,KAAhC,EAAuC,QAAvC,CAAP;EACD;;EACD,OAAO,KAAK8C,KAAL,EAAP;AACD,CALD;;AAOAzD,MAAM,CAACG,SAAP,CAAiBsD,KAAjB,GAAyB,YAAY;EACnC,IAAI,KAAKnD,IAAL,CAAU,GAAV,CAAJ,EAAoB;IAClB,KAAKM,OAAL;IACA,IAAI2C,MAAM,GAAG,EAAb;;IACA,OAAO,CAAC,KAAKjD,IAAL,CAAU,GAAV,CAAD,IAAmB,CAAC,KAAKW,KAAL,EAA3B,EAAyC;MACvCsC,MAAM,CAAC9B,IAAP,CAAY,KAAKC,UAAL,EAAZ;;MACA,IAAI,KAAKpB,IAAL,CAAU,GAAV,CAAJ,EAAoB;QAClB,KAAKM,OAAL;MACD;IACF;;IACD,KAAKG,MAAL,CAAY,GAAZ;IACA,OAAO,IAAInB,SAAJ,CAAc2D,MAAd,CAAP;EACD;;EACD,OAAO,KAAKG,MAAL,EAAP;AACD,CAdD;;AAgBA1D,MAAM,CAACG,SAAP,CAAiBuD,MAAjB,GAA0B,YAAY;EACpC,IAAIC,KAAK,GAAG,KAAKvD,OAAL,EAAZ;;EACA,IAAIuD,KAAK,CAACzC,IAAN,KAAe9B,SAAS,CAAC2D,MAA7B,EAAqC;IACnC,OAAO,IAAIxD,YAAJ,CAAiB,KAAKqB,OAAL,GAAeD,KAAhC,EAAuC,QAAvC,CAAP;EACD;;EACD,OAAO,KAAKiD,WAAL,EAAP;AACD,CAND;;AAQA5D,MAAM,CAACG,SAAP,CAAiByD,WAAjB,GAA+B,YAAY;EACzC,IAAID,KAAK,GAAG,KAAKvD,OAAL,EAAZ;;EACA,IAAIuD,KAAK,CAAChD,KAAN,KAAgB,GAApB,EAAyB;IACvB,KAAKC,OAAL;IACA,IAAIgB,IAAI,GAAG,KAAKF,UAAL,EAAX;IACA,KAAKX,MAAL,CAAY,GAAZ;IACA,OAAOa,IAAP;EACD;;EACD,OAAO,KAAKD,GAAL,EAAP;AACD,CATD;;AAWA3B,MAAM,CAACG,SAAP,CAAiBwB,GAAjB,GAAuB,YAAY;EACjC,IAAIgC,KAAK,GAAG,KAAKvD,OAAL,EAAZ;;EACA,IAAIuD,KAAK,CAACzC,IAAN,KAAe9B,SAAS,CAAC+B,GAA7B,EAAkC;IAChC,MAAMH,KAAK,CAAC,8BAAD,CAAX;EACD;AACF,CALD;;AAOA6C,MAAM,CAACC,OAAP,GAAiB9D,MAAjB"},"metadata":{},"sourceType":"script"}