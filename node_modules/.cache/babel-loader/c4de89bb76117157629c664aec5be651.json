{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst d3_selection_1 = require(\"d3-selection\");\n\nconst d3_color_1 = require(\"d3-color\");\n\nconst utils_1 = __importDefault(require(\"../utils\"));\n\nconst evaluate_1 = __importDefault(require(\"../evaluate\"));\n\nfunction scatter(chart) {\n  const xScale = chart.meta.xScale;\n  const yScale = chart.meta.yScale;\n\n  function scatter(selection) {\n    selection.each(function (d) {\n      let i, j;\n      const index = d.index;\n      const color = utils_1.default.color(d, index);\n      const evaluatedData = evaluate_1.default(chart, d); // scatter doesn't need groups, therefore each group is\n      // flattened into a single array\n\n      const joined = [];\n\n      for (i = 0; i < evaluatedData.length; i += 1) {\n        for (j = 0; j < evaluatedData[i].length; j += 1) {\n          joined.push(evaluatedData[i][j]);\n        }\n      }\n\n      const innerSelection = d3_selection_1.select(this).selectAll(':scope > circle').data(joined);\n      const innerSelectionEnter = innerSelection.enter().append('circle');\n      const selection = innerSelection.merge(innerSelectionEnter).attr('fill', d3_color_1.hsl(color.toString()).brighter(1.5).hex()).attr('stroke', color).attr('opacity', 0.7).attr('r', 1).attr('cx', function (d) {\n        return xScale(d[0]);\n      }).attr('cy', function (d) {\n        return yScale(d[1]);\n      });\n\n      if (d.attr) {\n        for (let k in d.attr) {\n          if (d.attr.hasOwnProperty(k)) {\n            selection.attr(k, d.attr[k]);\n          }\n        }\n      }\n\n      innerSelection.exit().remove();\n    });\n  }\n\n  return scatter;\n}\n\nexports.default = scatter;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAKA,SAAwBA,OAAxB,CAAiCC,KAAjC,EAA6C;EAC3C,MAAMC,MAAM,GAAGD,KAAK,CAACE,IAAN,CAAWD,MAA1B;EACA,MAAME,MAAM,GAAGH,KAAK,CAACE,IAAN,CAAWC,MAA1B;;EAEA,SAASJ,OAAT,CAAkBK,SAAlB,EAAwE;IACtEA,SAAS,CAACC,IAAV,CAAe,UAAUC,CAAV,EAAW;MACxB,IAAIC,CAAJ,EAAOC,CAAP;MACA,MAAMC,KAAK,GAAGH,CAAC,CAACG,KAAhB;MACA,MAAMC,KAAK,GAAGC,gBAAMD,KAAN,CAAYJ,CAAZ,EAAeG,KAAf,CAAd;MACA,MAAMG,aAAa,GAAGC,mBAASb,KAAT,EAAgBM,CAAhB,CAAtB,CAJwB,CAMxB;MACA;;MACA,MAAMQ,MAAM,GAAG,EAAf;;MACA,KAAKP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,aAAa,CAACG,MAA9B,EAAsCR,CAAC,IAAI,CAA3C,EAA8C;QAC5C,KAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGI,aAAa,CAACL,CAAD,CAAb,CAAiBQ,MAAjC,EAAyCP,CAAC,IAAI,CAA9C,EAAiD;UAC/CM,MAAM,CAACE,IAAP,CAAYJ,aAAa,CAACL,CAAD,CAAb,CAAiBC,CAAjB,CAAZ;QACD;MACF;;MAED,MAAMS,cAAc,GAAGC,sBAAS,IAAT,EACpBC,SADoB,CACV,iBADU,EAEpBC,IAFoB,CAEfN,MAFe,CAAvB;MAIA,MAAMO,mBAAmB,GAAGJ,cAAc,CAACK,KAAf,GACzBC,MADyB,CAClB,QADkB,CAA5B;MAGA,MAAMnB,SAAS,GAAGa,cAAc,CAACO,KAAf,CAAqBH,mBAArB,EACfI,IADe,CACV,MADU,EACFC,eAAMhB,KAAK,CAACiB,QAAN,EAAN,EAAwBC,QAAxB,CAAiC,GAAjC,EAAsCC,GAAtC,EADE,EAEfJ,IAFe,CAEV,QAFU,EAEAf,KAFA,EAGfe,IAHe,CAGV,SAHU,EAGC,GAHD,EAIfA,IAJe,CAIV,GAJU,EAIL,CAJK,EAKfA,IALe,CAKV,IALU,EAKJ,UAAUnB,CAAV,EAAW;QAAI,OAAOL,MAAM,CAACK,CAAC,CAAC,CAAD,CAAF,CAAb;MAAqB,CALhC,EAMfmB,IANe,CAMV,IANU,EAMJ,UAAUnB,CAAV,EAAW;QAAI,OAAOH,MAAM,CAACG,CAAC,CAAC,CAAD,CAAF,CAAb;MAAqB,CANhC,CAAlB;;MAQA,IAAIA,CAAC,CAACmB,IAAN,EAAY;QACV,KAAK,IAAIK,CAAT,IAAcxB,CAAC,CAACmB,IAAhB,EAAsB;UACpB,IAAGnB,CAAC,CAACmB,IAAF,CAAOM,cAAP,CAAsBD,CAAtB,CAAH,EAA6B;YAC3B1B,SAAS,CAACqB,IAAV,CAAeK,CAAf,EAAkBxB,CAAC,CAACmB,IAAF,CAAOK,CAAP,CAAlB;UACD;QACF;MACF;;MAEDb,cAAc,CAACe,IAAf,GAAsBC,MAAtB;IACD,CAvCD;EAwCD;;EAED,OAAOlC,OAAP;AACD;;AAhDDmC","names":["scatter","chart","xScale","meta","yScale","selection","each","d","i","j","index","color","utils_1","evaluatedData","evaluate_1","joined","length","push","innerSelection","d3_selection_1","selectAll","data","innerSelectionEnter","enter","append","merge","attr","d3_color_1","toString","brighter","hex","k","hasOwnProperty","exit","remove","exports"],"sources":["../../src/graph-types/scatter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}