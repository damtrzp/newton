{"ast":null,"code":"import * as utils from './utils'; // boost/numeric/interval_lib/compare/certain package on boost\n\n/**\n * @mixin relational\n */\n\n/**\n * Checks if the intervals `x`, `y` are equal, they're equal when\n * `x.lo === y.lo` and `x.hi === y.hi`, a corner case handled is when `x` and\n * `y` are both empty intervals\n *\n * @example\n * ```typescript\n * Interval.equal(\n *   Interval(2, 3),\n *   Interval(2, 3)\n * ) // true\n * ```\n *\n * @example\n * ```typescript\n * Interval.equal(\n *   Interval.EMPTY,\n *   Interval.EMPTY\n * ) // true\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\n\nexport function equal(x, y) {\n  if (utils.isEmpty(x)) {\n    return utils.isEmpty(y);\n  }\n\n  return !utils.isEmpty(y) && x.lo === y.lo && x.hi === y.hi;\n} // <debug>\n\nvar EPS = 1e-7;\n\nfunction assert(a, message) {\n  /* istanbul ignore next */\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n  if (!a) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    throw new Error(message || 'assertion failed');\n  }\n}\n\nfunction assertEps(a, b) {\n  if (!isFinite(a)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    return assert(a === b, \"[Infinity] expected \" + a + \" to be \" + b);\n  } // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\n\n  assert(Math.abs(a - b) < EPS, \"expected \" + a + \" to be close to \" + b);\n}\n\nexport function almostEqual(x, y) {\n  x = Array.isArray(x) ? x : x.toArray();\n  y = Array.isArray(y) ? y : y.toArray();\n  assertEps(x[0], y[0]);\n  assertEps(x[1], y[1]);\n}\nexport function assertIncludes(x, y) {\n  // checks that `y` is included in `x` with the bounds close to `x`\n  almostEqual(x, y);\n  x = Array.isArray(x) ? x : x.toArray();\n  y = Array.isArray(y) ? y : y.toArray();\n  assert(x[0] <= y[0], x[0] + \" should be less/equal than \" + y[0]);\n  assert(y[1] <= x[1], y[1] + \" should be less/equal than \" + x[1]);\n} // </debug>\n\n/**\n * Checks if the intervals `x`, `y` are not equal i.e. when the intervals don't\n * share any value\n *\n * @example\n * ```typescript\n * Interval.notEqual(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // true\n * ```\n *\n * @example\n * ```typescript\n * Interval.notEqual(\n *   Interval(2, 3),\n *   Interval(3, 5)\n * ) // false\n * ```\n *\n * @example\n * ```typescript\n * Interval.notEqual(\n *   Interval(2, 4),\n *   Interval(3, 5)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\n\nexport function notEqual(x, y) {\n  if (utils.isEmpty(x)) {\n    return !utils.isEmpty(y);\n  }\n\n  return utils.isEmpty(y) || x.hi < y.lo || x.lo > y.hi;\n}\n/**\n * Checks if the interval `x` is less than `y` i.e. if all the values of `x`\n * are lower than the left endpoint of `y`\n *\n * @example\n * ```typescript\n * Interval.lessThan(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // true\n * ```\n *\n * @example\n * ```typescript\n * Interval.lessThan(\n *   Interval(4, 5),\n *   Interval(2, 3)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nexport function lessThan(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.hi < y.lo;\n}\n/**\n * Alias for {@link lessThan}\n * @function\n */\n\nexport var lt = lessThan;\n/**\n * Checks if the interval `x` is greater than `y` i.e. if all the values of `x`\n * are greater than the right endpoint of `y`\n *\n * @example\n * ```typescript\n * Interval.greaterThan(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // false\n * ```\n *\n * @example\n * ```typescript\n * Interval.greaterThan(\n *   Interval(4, 5),\n *   Interval(2, 3)\n * ) // true\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nexport function greaterThan(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.lo > y.hi;\n}\n/**\n * Alias for {@link greaterThan}\n * @function\n */\n\nexport var gt = greaterThan;\n/**\n * Checks if the interval `x` is less or equal than `y` i.e.\n * if all the values of `x` are lower or equal to the left endpoint of `y`\n *\n * @example\n * ```typescript\n * Interval.lessEqualThan(\n *   Interval(2, 3),\n *   Interval(3, 5)\n * ) // true\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nexport function lessEqualThan(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.hi <= y.lo;\n}\n/**\n * Alias for {@link lessEqualThan}\n * @function\n */\n\nexport var leq = lessEqualThan;\n/**\n * Checks if the interval `x` is greater or equal than `y` i.e.\n * if all the values of `x` are greater or equal to the right endpoint of `y`\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nexport function greaterEqualThan(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.lo >= y.hi;\n}\n/**\n * Alias for {@link greaterEqualThan}\n * @function\n */\n\nexport var geq = greaterEqualThan;","map":{"version":3,"mappings":"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","names":["utils","equal","x","y","isEmpty","lo","hi","EPS","assert","a","message","Error","assertEps","b","isFinite","Math","abs","almostEqual","Array","isArray","toArray","assertIncludes","notEqual","lessThan","lt","greaterThan","gt","lessEqualThan","leq","greaterEqualThan","geq"],"sources":["../../src/operations/relational.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}