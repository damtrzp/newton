{"ast":null,"code":"'use strict';\n\nvar CodeGenerator = require('math-codegen');\n\nvar math = require('./adapter')();\n\nfunction processScope(scope) {\n  Object.keys(scope).forEach(function (k) {\n    var value = scope[k];\n    scope[k] = math.factory(value);\n  });\n}\n\nmodule.exports = function (expression) {\n  return new CodeGenerator().setDefs({\n    $$processScope: processScope\n  }).parse(expression).compile(math);\n};\n\nmodule.exports.math = math;","map":{"version":3,"names":["CodeGenerator","require","math","processScope","scope","Object","keys","forEach","k","value","factory","module","exports","expression","setDefs","$$processScope","parse","compile"],"sources":["/home/programowanie/newton-rhapson/newton/node_modules/built-in-math-eval/lib/eval.js"],"sourcesContent":["'use strict'\n\nvar CodeGenerator = require('math-codegen')\nvar math = require('./adapter')()\n\nfunction processScope (scope) {\n  Object.keys(scope).forEach(function (k) {\n    var value = scope[k]\n    scope[k] = math.factory(value)\n  })\n}\n\nmodule.exports = function (expression) {\n  return new CodeGenerator()\n    .setDefs({\n      $$processScope: processScope\n    })\n    .parse(expression)\n    .compile(math)\n}\n\nmodule.exports.math = math\n"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAAP,EAAX;;AAEA,SAASE,YAAT,CAAuBC,KAAvB,EAA8B;EAC5BC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,CAAV,EAAa;IACtC,IAAIC,KAAK,GAAGL,KAAK,CAACI,CAAD,CAAjB;IACAJ,KAAK,CAACI,CAAD,CAAL,GAAWN,IAAI,CAACQ,OAAL,CAAaD,KAAb,CAAX;EACD,CAHD;AAID;;AAEDE,MAAM,CAACC,OAAP,GAAiB,UAAUC,UAAV,EAAsB;EACrC,OAAO,IAAIb,aAAJ,GACJc,OADI,CACI;IACPC,cAAc,EAAEZ;EADT,CADJ,EAIJa,KAJI,CAIEH,UAJF,EAKJI,OALI,CAKIf,IALJ,CAAP;AAMD,CAPD;;AASAS,MAAM,CAACC,OAAP,CAAeV,IAAf,GAAsBA,IAAtB"},"metadata":{},"sourceType":"script"}