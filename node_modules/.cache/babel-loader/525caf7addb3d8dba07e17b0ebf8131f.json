{"ast":null,"code":"// token types\nvar tokenType = require('./token-type');\n\nvar ESCAPES = {\n  'n': '\\n',\n  'f': '\\f',\n  'r': '\\r',\n  't': '\\t',\n  'v': '\\v',\n  '\\'': '\\'',\n  '\"': '\"'\n};\nvar DELIMITERS = {\n  ',': true,\n  '(': true,\n  ')': true,\n  '[': true,\n  ']': true,\n  ';': true,\n  // unary\n  '~': true,\n  // factorial\n  '!': true,\n  // arithmetic operators\n  '+': true,\n  '-': true,\n  '*': true,\n  '/': true,\n  '%': true,\n  '^': true,\n  '**': true,\n  // python power like\n  // misc operators\n  '|': true,\n  // bitwise or\n  '&': true,\n  // bitwise and\n  '^|': true,\n  // bitwise xor\n  '=': true,\n  ':': true,\n  '?': true,\n  '||': true,\n  // logical or\n  '&&': true,\n  // logical and\n  'xor': true,\n  // logical xor\n  // relational\n  '==': true,\n  '!=': true,\n  '===': true,\n  '!==': true,\n  '<': true,\n  '>': true,\n  '>=': true,\n  '<=': true,\n  // shifts\n  '>>>': true,\n  '<<': true,\n  '>>': true\n}; // helpers\n\nfunction isDigit(c) {\n  return c >= '0' && c <= '9';\n}\n\nfunction isIdentifier(c) {\n  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '$' || c === '_';\n}\n\nfunction isWhitespace(c) {\n  return c === ' ' || c === '\\r' || c === '\\t' || c === '\\n' || c === '\\v' || c === '\\u00A0';\n}\n\nfunction isDelimiter(str) {\n  return DELIMITERS[str];\n}\n\nfunction isQuote(c) {\n  return c === '\\'' || c === '\"';\n} // lexer\n\n\nfunction Lexer() {}\n\nLexer.prototype.throwError = function (message, index) {\n  index = typeof index === 'undefined' ? this.index : index;\n  var error = new Error(message + ' at index ' + index);\n  error.index = index;\n  error.description = message;\n  throw error;\n};\n\nLexer.prototype.lex = function (text) {\n  this.text = text;\n  this.index = 0;\n  this.tokens = [];\n\n  while (this.index < this.text.length) {\n    // skip whitespaces\n    while (isWhitespace(this.peek())) {\n      this.consume();\n    }\n\n    var c = this.peek();\n    var c2 = c + this.peek(1);\n    var c3 = c2 + this.peek(2); // order\n    // - delimiter of 3 characters\n    // - delimiter of 2 characters\n    // - delimiter of 1 character\n    // - number\n    // - variables, functions and named operators\n\n    if (isDelimiter(c3)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c3\n      });\n      this.consume();\n      this.consume();\n      this.consume();\n    } else if (isDelimiter(c2)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c2\n      });\n      this.consume();\n      this.consume();\n    } else if (isDelimiter(c)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c\n      });\n      this.consume();\n    } else if (isDigit(c) || c === '.' && isDigit(this.peek(1))) {\n      this.tokens.push({\n        type: tokenType.NUMBER,\n        value: this.readNumber()\n      });\n    } else if (isQuote(c)) {\n      this.tokens.push({\n        type: tokenType.STRING,\n        value: this.readString()\n      });\n    } else if (isIdentifier(c)) {\n      this.tokens.push({\n        type: tokenType.SYMBOL,\n        value: this.readIdentifier()\n      });\n    } else {\n      this.throwError('unexpected character ' + c);\n    }\n  } // end token\n\n\n  this.tokens.push({\n    type: tokenType.EOF\n  });\n  return this.tokens;\n};\n\nLexer.prototype.peek = function (nth) {\n  nth = nth || 0;\n\n  if (this.index + nth >= this.text.length) {\n    return;\n  }\n\n  return this.text.charAt(this.index + nth);\n};\n\nLexer.prototype.consume = function () {\n  var current = this.peek();\n  this.index += 1;\n  return current;\n};\n\nLexer.prototype.readNumber = function () {\n  var number = '';\n\n  if (this.peek() === '.') {\n    number += this.consume();\n\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected');\n    }\n  } else {\n    while (isDigit(this.peek())) {\n      number += this.consume();\n    }\n\n    if (this.peek() === '.') {\n      number += this.consume();\n    }\n  } // numbers after the decimal dot\n\n\n  while (isDigit(this.peek())) {\n    number += this.consume();\n  } // exponent if available\n\n\n  if (this.peek() === 'e' || this.peek() === 'E') {\n    number += this.consume();\n\n    if (!(isDigit(this.peek()) || this.peek() === '+' || this.peek() === '-')) {\n      this.throwError();\n    }\n\n    if (this.peek() === '+' || this.peek() === '-') {\n      number += this.consume();\n    }\n\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected');\n    }\n\n    while (isDigit(this.peek())) {\n      number += this.consume();\n    }\n  }\n\n  return number;\n};\n\nLexer.prototype.readIdentifier = function () {\n  var text = '';\n\n  while (isIdentifier(this.peek()) || isDigit(this.peek())) {\n    text += this.consume();\n  }\n\n  return text;\n};\n\nLexer.prototype.readString = function () {\n  var quote = this.consume();\n  var string = '';\n  var escape;\n\n  while (true) {\n    var c = this.consume();\n\n    if (!c) {\n      this.throwError('string is not closed');\n    }\n\n    if (escape) {\n      if (c === 'u') {\n        var hex = this.text.substring(this.index + 1, this.index + 5);\n\n        if (!hex.match(/[\\da-f]{4}/i)) {\n          this.throwError('invalid unicode escape');\n        }\n\n        this.index += 4;\n        string += String.fromCharCode(parseInt(hex, 16));\n      } else {\n        var replacement = ESCAPES[c];\n\n        if (replacement) {\n          string += replacement;\n        } else {\n          string += c;\n        }\n      }\n\n      escape = false;\n    } else if (c === quote) {\n      break;\n    } else if (c === '\\\\') {\n      escape = true;\n    } else {\n      string += c;\n    }\n  }\n\n  return string;\n};\n\nmodule.exports = Lexer;","map":{"version":3,"names":["tokenType","require","ESCAPES","DELIMITERS","isDigit","c","isIdentifier","isWhitespace","isDelimiter","str","isQuote","Lexer","prototype","throwError","message","index","error","Error","description","lex","text","tokens","length","peek","consume","c2","c3","push","type","DELIMITER","value","NUMBER","readNumber","STRING","readString","SYMBOL","readIdentifier","EOF","nth","charAt","current","number","quote","string","escape","hex","substring","match","String","fromCharCode","parseInt","replacement","module","exports"],"sources":["/home/programowanie/newton-rhapson/newton/node_modules/mr-parser/lib/Lexer.js"],"sourcesContent":["// token types\nvar tokenType = require('./token-type')\n\nvar ESCAPES = {\n  'n': '\\n',\n  'f': '\\f',\n  'r': '\\r',\n  't': '\\t',\n  'v': '\\v',\n  '\\'': '\\'',\n  '\"': '\"'\n}\n\nvar DELIMITERS = {\n  ',': true,\n  '(': true,\n  ')': true,\n  '[': true,\n  ']': true,\n  ';': true,\n\n  // unary\n  '~': true,\n\n  // factorial\n  '!': true,\n\n  // arithmetic operators\n  '+': true,\n  '-': true,\n  '*': true,\n  '/': true,\n  '%': true,\n  '^': true,\n  '**': true,     // python power like\n\n  // misc operators\n  '|': true,      // bitwise or\n  '&': true,      // bitwise and\n  '^|': true,     // bitwise xor\n  '=': true,\n  ':': true,\n  '?': true,\n\n  '||': true,      // logical or\n  '&&': true,      // logical and\n  'xor': true,     // logical xor\n\n  // relational\n  '==': true,\n  '!=': true,\n  '===': true,\n  '!==': true,\n  '<': true,\n  '>': true,\n  '>=': true,\n  '<=': true,\n\n  // shifts\n  '>>>': true,\n  '<<': true,\n  '>>': true\n}\n\n// helpers\n\nfunction isDigit (c) {\n  return c >= '0' && c <= '9'\n}\n\nfunction isIdentifier (c) {\n  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||\n    c === '$' || c === '_'\n}\n\nfunction isWhitespace (c) {\n  return c === ' ' || c === '\\r' || c === '\\t' ||\n    c === '\\n' || c === '\\v' || c === '\\u00A0'\n}\n\nfunction isDelimiter (str) {\n  return DELIMITERS[str]\n}\n\nfunction isQuote (c) {\n  return c === '\\'' || c === '\"'\n}\n\n// lexer\n\nfunction Lexer () {}\n\nLexer.prototype.throwError = function (message, index) {\n  index = typeof index === 'undefined' ? this.index : index\n\n  var error = new Error(message + ' at index ' + index)\n  error.index = index\n  error.description = message\n  throw error\n}\n\nLexer.prototype.lex = function (text) {\n  this.text = text\n  this.index = 0\n  this.tokens = []\n\n  while (this.index < this.text.length) {\n    // skip whitespaces\n    while (isWhitespace(this.peek())) {\n      this.consume()\n    }\n    var c = this.peek()\n    var c2 = c + this.peek(1)\n    var c3 = c2 + this.peek(2)\n\n    // order\n    // - delimiter of 3 characters\n    // - delimiter of 2 characters\n    // - delimiter of 1 character\n    // - number\n    // - variables, functions and named operators\n    if (isDelimiter(c3)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c3\n      })\n      this.consume()\n      this.consume()\n      this.consume()\n    } else if (isDelimiter(c2)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c2\n      })\n      this.consume()\n      this.consume()\n    } else if (isDelimiter(c)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c\n      })\n      this.consume()\n    } else if (isDigit(c) ||\n        (c === '.' && isDigit(this.peek(1)))) {\n      this.tokens.push({\n        type: tokenType.NUMBER,\n        value: this.readNumber()\n      })\n    } else if (isQuote(c)) {\n      this.tokens.push({\n        type: tokenType.STRING,\n        value: this.readString()\n      })\n    } else if (isIdentifier(c)) {\n      this.tokens.push({\n        type: tokenType.SYMBOL,\n        value: this.readIdentifier()\n      })\n    } else {\n      this.throwError('unexpected character ' + c)\n    }\n  }\n\n  // end token\n  this.tokens.push({ type: tokenType.EOF })\n\n  return this.tokens\n}\n\nLexer.prototype.peek = function (nth) {\n  nth = nth || 0\n  if (this.index + nth >= this.text.length) {\n    return\n  }\n  return this.text.charAt(this.index + nth)\n}\n\nLexer.prototype.consume = function () {\n  var current = this.peek()\n  this.index += 1\n  return current\n}\n\nLexer.prototype.readNumber = function () {\n  var number = ''\n\n  if (this.peek() === '.') {\n    number += this.consume()\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected')\n    }\n  } else {\n    while (isDigit(this.peek())) {\n      number += this.consume()\n    }\n    if (this.peek() === '.') {\n      number += this.consume()\n    }\n  }\n\n  // numbers after the decimal dot\n  while (isDigit(this.peek())) {\n    number += this.consume()\n  }\n\n  // exponent if available\n  if ((this.peek() === 'e' || this.peek() === 'E')) {\n    number += this.consume()\n\n    if (!(isDigit(this.peek()) ||\n        this.peek() === '+' ||\n        this.peek() === '-')) {\n      this.throwError()\n    }\n\n    if (this.peek() === '+' || this.peek() === '-') {\n      number += this.consume()\n    }\n\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected')\n    }\n\n    while (isDigit(this.peek())) {\n      number += this.consume()\n    }\n  }\n  return number\n}\n\nLexer.prototype.readIdentifier = function () {\n  var text = ''\n  while (isIdentifier(this.peek()) || isDigit(this.peek())) {\n    text += this.consume()\n  }\n  return text\n}\n\nLexer.prototype.readString = function () {\n  var quote = this.consume()\n  var string = ''\n  var escape\n  while (true) {\n    var c = this.consume()\n    if (!c) {\n      this.throwError('string is not closed')\n    }\n    if (escape) {\n      if (c === 'u') {\n        var hex = this.text.substring(this.index + 1, this.index + 5)\n        if (!hex.match(/[\\da-f]{4}/i)) {\n          this.throwError('invalid unicode escape')\n        }\n        this.index += 4\n        string += String.fromCharCode(parseInt(hex, 16))\n      } else {\n        var replacement = ESCAPES[c]\n        if (replacement) {\n          string += replacement\n        } else {\n          string += c\n        }\n      }\n      escape = false\n    } else if (c === quote) {\n      break\n    } else if (c === '\\\\') {\n      escape = true\n    } else {\n      string += c\n    }\n  }\n  return string\n}\n\nmodule.exports = Lexer\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}