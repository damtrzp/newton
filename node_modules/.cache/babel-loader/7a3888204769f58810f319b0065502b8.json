{"ast":null,"code":"import { create, all, evaluate } from 'mathjs'; // math.js\n\nvar config = {\n  epsilon: 1e-12,\n  matrix: 'Matrix',\n  number: 'number',\n  precision: 64,\n  predictable: false,\n  randomSeed: null\n};\nvar math = create(all, config);\n\nfunction TangentToGraph(f, a, derivative) {\n  // L(x) = f '(a) (x - a) + f(a)\n  var L = \"\".concat(evaluate(derivative, {\n    x: a\n  }), \" * (x-\").concat(a, \") + \").concat(evaluate(f, {\n    x: a\n  }));\n  return L;\n}\n\nexport default TangentToGraph;","map":{"version":3,"names":["create","all","evaluate","config","epsilon","matrix","number","precision","predictable","randomSeed","math","TangentToGraph","f","a","derivative","L","x"],"sources":["/home/programowanie/newton-rhapson/newton/src/tangentLine.js"],"sourcesContent":["import { create, all, evaluate } from 'mathjs'\n\n// math.js\nconst config = {\n  epsilon: 1e-12,\n  matrix: 'Matrix',\n  number: 'number',\n  precision: 64,\n  predictable: false,\n  randomSeed: null\n}\nconst math = create(all, config)\n\n\nfunction TangentToGraph(f, a, derivative) {\n\n    // L(x) = f '(a) (x - a) + f(a)\n    let L = `${evaluate(derivative, {x:a})} * (x-${a}) + ${evaluate(f, {x:a})}`;\n    return L;\n}\n\nexport default TangentToGraph;"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,QAAtB,QAAsC,QAAtC,C,CAEA;;AACA,IAAMC,MAAM,GAAG;EACbC,OAAO,EAAE,KADI;EAEbC,MAAM,EAAE,QAFK;EAGbC,MAAM,EAAE,QAHK;EAIbC,SAAS,EAAE,EAJE;EAKbC,WAAW,EAAE,KALA;EAMbC,UAAU,EAAE;AANC,CAAf;AAQA,IAAMC,IAAI,GAAGV,MAAM,CAACC,GAAD,EAAME,MAAN,CAAnB;;AAGA,SAASQ,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,UAA9B,EAA0C;EAEtC;EACA,IAAIC,CAAC,aAAMb,QAAQ,CAACY,UAAD,EAAa;IAACE,CAAC,EAACH;EAAH,CAAb,CAAd,mBAA0CA,CAA1C,iBAAkDX,QAAQ,CAACU,CAAD,EAAI;IAACI,CAAC,EAACH;EAAH,CAAJ,CAA1D,CAAL;EACA,OAAOE,CAAP;AACH;;AAED,eAAeJ,cAAf"},"metadata":{},"sourceType":"module"}