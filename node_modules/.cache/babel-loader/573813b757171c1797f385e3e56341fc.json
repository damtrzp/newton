{"ast":null,"code":"import { Interval } from '../interval';\nimport rmath from '../round';\nimport * as utils from './utils';\nimport constants from '../constants';\n/**\n * Division between intervals when `y` doesn't contain zero\n * @param {Interval} x\n * @param {Interval} y\n * @returns {Interval}\n */\n\nexport function nonZero(x, y) {\n  var xl = x.lo;\n  var xh = x.hi;\n  var yl = y.lo;\n  var yh = y.hi;\n  var out = new Interval();\n\n  if (xh < 0) {\n    if (yh < 0) {\n      out.lo = rmath.divLo(xh, yl);\n      out.hi = rmath.divHi(xl, yh);\n    } else {\n      out.lo = rmath.divLo(xl, yl);\n      out.hi = rmath.divHi(xh, yh);\n    }\n  } else if (xl < 0) {\n    if (yh < 0) {\n      out.lo = rmath.divLo(xh, yh);\n      out.hi = rmath.divHi(xl, yh);\n    } else {\n      out.lo = rmath.divLo(xl, yl);\n      out.hi = rmath.divHi(xh, yl);\n    }\n  } else {\n    if (yh < 0) {\n      out.lo = rmath.divLo(xh, yh);\n      out.hi = rmath.divHi(xl, yl);\n    } else {\n      out.lo = rmath.divLo(xl, yh);\n      out.hi = rmath.divHi(xh, yl);\n    }\n  }\n\n  return out;\n}\n/**\n * Division between an interval and a positive constant\n * @param {Interval} x\n * @param {number} v\n * @returns {Interval}\n */\n\nexport function positive(x, v) {\n  if (x.lo === 0 && x.hi === 0) {\n    return x;\n  }\n\n  if (utils.zeroIn(x)) {\n    // mixed considering zero in both ends\n    return constants.WHOLE;\n  }\n\n  if (x.hi < 0) {\n    // negative / v\n    return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(x.hi, v));\n  } else {\n    // positive / v\n    return new Interval(rmath.divLo(x.lo, v), Number.POSITIVE_INFINITY);\n  }\n}\n/**\n * Division between an interval and a negative constant\n * @param {Interval} x\n * @param {number} v\n * @returns {Interval}\n */\n\nexport function negative(x, v) {\n  if (x.lo === 0 && x.hi === 0) {\n    return x;\n  }\n\n  if (utils.zeroIn(x)) {\n    // mixed considering zero in both ends\n    return constants.WHOLE;\n  }\n\n  if (x.hi < 0) {\n    // negative / v\n    return new Interval(rmath.divLo(x.hi, v), Number.POSITIVE_INFINITY);\n  } else {\n    // positive / v\n    return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(x.lo, v));\n  }\n}\n/**\n * Division between an interval and zero\n * @param {Interval} x\n * @returns {Interval}\n */\n\nexport function zero(x) {\n  if (x.lo === 0 && x.hi === 0) {\n    return x;\n  }\n\n  return constants.WHOLE;\n}","map":{"version":3,"mappings":"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","names":["Interval","rmath","utils","constants","nonZero","x","y","xl","lo","xh","hi","yl","yh","out","divLo","divHi","positive","v","zeroIn","WHOLE","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","negative","zero"],"sources":["../../src/operations/division.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}