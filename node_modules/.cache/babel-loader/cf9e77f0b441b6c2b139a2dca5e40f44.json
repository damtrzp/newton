{"ast":null,"code":"import { create, all, evaluate } from 'mathjs'; // math.js\n\nvar config = {\n  epsilon: 1e-12,\n  matrix: 'Matrix',\n  number: 'number',\n  precision: 64,\n  predictable: false,\n  randomSeed: null\n};\nvar math = create(all, config);\n\nfunction TangentToGraph(f) {\n  var derivative = math.derivative(f, \"x\"); // L(x) = f '(a) (x - a) + f(a)\n\n  var L = \"\".concat(derivative.evaluate({\n    x: a\n  }), \" * (x-\").concat(a, \") + \").concat(evaluate(f, {\n    x: a\n  }));\n  return L;\n}\n\nexport default TangentToGraph;","map":{"version":3,"names":["create","all","evaluate","config","epsilon","matrix","number","precision","predictable","randomSeed","math","TangentToGraph","f","derivative","L","x","a"],"sources":["/home/programowanie/newton-rhapson/newton/src/tangentLine.js"],"sourcesContent":["import { create, all, evaluate } from 'mathjs'\n\n// math.js\nconst config = {\n  epsilon: 1e-12,\n  matrix: 'Matrix',\n  number: 'number',\n  precision: 64,\n  predictable: false,\n  randomSeed: null\n}\nconst math = create(all, config)\n\n\nfunction TangentToGraph(f) {\n    let derivative = math.derivative(f, \"x\")\n\n    // L(x) = f '(a) (x - a) + f(a)\n    let L = `${derivative.evaluate({x:a})} * (x-${a}) + ${evaluate(f, {x:a})}`;\n    return L;\n}\n\nexport default TangentToGraph;"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,QAAtB,QAAsC,QAAtC,C,CAEA;;AACA,IAAMC,MAAM,GAAG;EACbC,OAAO,EAAE,KADI;EAEbC,MAAM,EAAE,QAFK;EAGbC,MAAM,EAAE,QAHK;EAIbC,SAAS,EAAE,EAJE;EAKbC,WAAW,EAAE,KALA;EAMbC,UAAU,EAAE;AANC,CAAf;AAQA,IAAMC,IAAI,GAAGV,MAAM,CAACC,GAAD,EAAME,MAAN,CAAnB;;AAGA,SAASQ,cAAT,CAAwBC,CAAxB,EAA2B;EACvB,IAAIC,UAAU,GAAGH,IAAI,CAACG,UAAL,CAAgBD,CAAhB,EAAmB,GAAnB,CAAjB,CADuB,CAGvB;;EACA,IAAIE,CAAC,aAAMD,UAAU,CAACX,QAAX,CAAoB;IAACa,CAAC,EAACC;EAAH,CAApB,CAAN,mBAAyCA,CAAzC,iBAAiDd,QAAQ,CAACU,CAAD,EAAI;IAACG,CAAC,EAACC;EAAH,CAAJ,CAAzD,CAAL;EACA,OAAOF,CAAP;AACH;;AAED,eAAeH,cAAf"},"metadata":{},"sourceType":"module"}