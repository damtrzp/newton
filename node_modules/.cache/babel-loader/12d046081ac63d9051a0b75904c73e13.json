{"ast":null,"code":"import { Interval } from '../interval';\nimport rmath from '../round';\nimport constants from '../constants';\nimport * as utils from './utils';\nimport * as arithmetic from './arithmetic';\nimport isSafeInteger from 'is-safe-integer';\n/**\n * @mixin algebra\n */\n\n/**\n * Computes `x mod y (x - k * y)`\n *\n * @example\n * ```typescript\n * Interval.fmod(\n *   Interval(5.3, 5.3),\n *   Interval(2, 2)\n * ) // Interval(1.3, 1.3)\n * Interval.fmod(\n *   Interval(5, 7),\n *   Interval(2, 3)\n * ) // Interval(2, 5)\n * // explanation: [5, 7] - [2, 3] * 1 = [2, 5]\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\nexport function fmod(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n\n  var yb = x.lo < 0 ? y.lo : y.hi;\n  var n = x.lo / yb;\n  if (n < 0) n = Math.ceil(n);else n = Math.floor(n); // x mod y = x - n * y\n\n  return arithmetic.sub(x, arithmetic.mul(y, new Interval(n)));\n}\n/**\n * Computes `1 / x`\n *\n * @example\n * ```typescript\n * Interval.multiplicativeInverse(\n *   Interval(2, 6)\n * )  // Interval(1/6, 1/2)\n * Interval.multiplicativeInverse(\n *   Interval(-6, -2)\n * )  // Interval(-1/2, -1/6)\n * ```\n *\n * @param {Interval} x\n * @returns {Interval}\n */\n\nexport function multiplicativeInverse(x) {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY;\n  }\n\n  if (utils.zeroIn(x)) {\n    if (x.lo !== 0) {\n      if (x.hi !== 0) {\n        // [negative, positive]\n        return constants.WHOLE;\n      } else {\n        // [negative, zero]\n        return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(1, x.lo));\n      }\n    } else {\n      if (x.hi !== 0) {\n        // [zero, positive]\n        return new Interval(rmath.divLo(1, x.hi), Number.POSITIVE_INFINITY);\n      } else {\n        // [zero, zero]\n        return constants.EMPTY;\n      }\n    }\n  } else {\n    // [positive, positive]\n    return new Interval(rmath.divLo(1, x.hi), rmath.divHi(1, x.lo));\n  }\n}\n/**\n * Computes `x^power` given that `power` is an integer\n *\n * If `power` is an Interval it must be a singletonInterval i.e. `x^x` is not\n * supported yet\n *\n * If `power` is a rational number use {@link nthRoot} instead\n *\n * @example\n * ```typescript\n * // 2^{-2}\n * Interval.pow(\n *   Interval(2, 2),\n *   -2\n * )  // Interval(1/4, 1/4)\n * // [2,3]^2\n * Interval.pow(\n *   Interval(2, 3),\n *   2\n * )  // Interval(4, 9)\n * // [2,3]^0\n * Interval.pow(\n *   Interval(2, 3),\n *   0\n * )  // Interval(1, 1)\n * // with a singleton interval\n * Interval.pow(\n *   Interval(2, 3),\n *   Interval(2)\n * )  // Interval(4, 9)\n * ```\n *\n * @param {Interval} x\n * @param {number|Interval} power A number of a singleton interval\n * @returns {Interval}\n */\n\nexport function pow(x, power) {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY;\n  }\n\n  if (typeof power === 'object') {\n    if (!utils.isSingleton(power)) {\n      return constants.EMPTY;\n    }\n\n    power = power.lo;\n  }\n\n  if (power === 0) {\n    if (x.lo === 0 && x.hi === 0) {\n      // 0^0\n      return constants.EMPTY;\n    } else {\n      // x^0\n      return constants.ONE;\n    }\n  } else if (power < 0) {\n    // compute [1 / x]^-power if power is negative\n    return pow(multiplicativeInverse(x), -power);\n  } // power > 0\n\n\n  if (isSafeInteger(power)) {\n    // power is integer\n    if (x.hi < 0) {\n      // [negative, negative]\n      // assume that power is even so the operation will yield a positive interval\n      // if not then just switch the sign and order of the interval bounds\n      var yl = rmath.powLo(-x.hi, power);\n      var yh = rmath.powHi(-x.lo, power);\n\n      if ((power & 1) === 1) {\n        // odd power\n        return new Interval(-yh, -yl);\n      } else {\n        // even power\n        return new Interval(yl, yh);\n      }\n    } else if (x.lo < 0) {\n      // [negative, positive]\n      if ((power & 1) === 1) {\n        return new Interval(-rmath.powLo(-x.lo, power), rmath.powHi(x.hi, power));\n      } else {\n        // even power means that any negative number will be zero (min value = 0)\n        // and the max value will be the max of x.lo^power, x.hi^power\n        return new Interval(0, rmath.powHi(Math.max(-x.lo, x.hi), power));\n      }\n    } else {\n      // [positive, positive]\n      return new Interval(rmath.powLo(x.lo, power), rmath.powHi(x.hi, power));\n    }\n  } else {\n    console.warn('power is not an integer, you should use nth-root instead, returning an empty interval');\n    return constants.EMPTY;\n  }\n}\n/**\n * Computes `sqrt(x)`, alias for `nthRoot(x, 2)`\n *\n * @example\n * ```typescript\n * Interval.sqrt(\n *   Interval(4, 9)\n * ) // Interval(prev(2), next(3))\n * ```\n *\n * @param {Interval} x\n * @returns {Interval}\n */\n\nexport function sqrt(x) {\n  return nthRoot(x, 2);\n}\n/**\n * Computes `x^(1/n)`\n *\n * @example\n * ```typescript\n * Interval.nthRoot(\n *   Interval(-27, -8),\n *   3\n * ) // Interval(-3, -2)\n * ```\n *\n * @param {Interval} x\n * @param {number|Interval} n A number or a singleton interval\n * @return {Interval}\n */\n\nexport function nthRoot(x, n) {\n  if (utils.isEmpty(x) || n < 0) {\n    // compute 1 / x^-power if power is negative\n    return constants.EMPTY;\n  } // singleton interval check\n\n\n  if (typeof n === 'object') {\n    if (!utils.isSingleton(n)) {\n      return constants.EMPTY;\n    }\n\n    n = n.lo;\n  }\n\n  var power = 1 / n;\n\n  if (x.hi < 0) {\n    // [negative, negative]\n    if (isSafeInteger(n) && (n & 1) === 1) {\n      // when n is odd we can always take the nth root\n      var yl = rmath.powHi(-x.lo, power);\n      var yh = rmath.powLo(-x.hi, power);\n      return new Interval(-yl, -yh);\n    } // n is not odd therefore there's no nth root\n\n\n    return constants.EMPTY;\n  } else if (x.lo < 0) {\n    // [negative, positive]\n    var yp = rmath.powHi(x.hi, power);\n\n    if (isSafeInteger(n) && (n & 1) === 1) {\n      // nth root of x.lo is possible (n is odd)\n      var yn = -rmath.powHi(-x.lo, power);\n      return new Interval(yn, yp);\n    }\n\n    return new Interval(0, yp);\n  } else {\n    // [positive, positive]\n    return new Interval(rmath.powLo(x.lo, power), rmath.powHi(x.hi, power));\n  }\n}","map":{"version":3,"mappings":"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","names":["Interval","rmath","constants","utils","arithmetic","isSafeInteger","fmod","x","y","isEmpty","EMPTY","yb","lo","hi","n","Math","ceil","floor","sub","mul","multiplicativeInverse","zeroIn","WHOLE","Number","NEGATIVE_INFINITY","divHi","divLo","POSITIVE_INFINITY","pow","power","isSingleton","ONE","yl","powLo","yh","powHi","max","console","warn","sqrt","nthRoot","yp","yn"],"sources":["../../src/operations/algebra.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}