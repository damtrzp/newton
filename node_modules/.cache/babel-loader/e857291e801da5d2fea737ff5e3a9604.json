{"ast":null,"code":"/**\n * @mixin utils\n */\n\n/**\n * Checks if `x` is an interval, `x` is an interval if it's an object which has\n * `x.lo` and `x.hi` defined and both are numbers\n *\n * @example\n * ```typescript\n * Interval.isInterval(\n *   Interval()\n * ) // true\n * Interval.isInterval(\n *   undefined\n * ) // false\n * Interval.isInterval(\n *   {lo: 1, hi: 2}\n * ) // true\n * ```\n *\n * @param  {*} x\n * @return {boolean} true if `x` is an interval\n */\nexport function isInterval(x) {\n  return typeof x === 'object' && typeof x.lo === 'number' && typeof x.hi === 'number';\n}\n/**\n * Checks if `x` is empty, it's empty when `x.lo > x.hi`\n *\n * @example\n * ```typescript\n * Interval.isEmpty(\n *   Interval.EMPTY\n * ) // true\n * Interval.isEmpty(\n *   Interval.WHOLE\n * ) // false\n * Interval.isEmpty(\n *   // bypass empty interval check\n *   Interval().set(1, -1)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\n\nexport function isEmpty(i) {\n  return i.lo > i.hi;\n}\n/**\n * Checks if an interval is a whole interval, that is an interval which covers\n * all the real numbers i.e. when `x.lo === -Infinity` and `x.hi === Infinity`\n *\n * @example\n * ```typescript\n * Interval.isWhole(\n *   Interval.WHOLE\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\n\nexport function isWhole(i) {\n  return i.lo === -Infinity && i.hi === Infinity;\n}\n/**\n * Checks if the intervals `x` is a singleton (an interval representing a single\n * value) i.e. when `x.lo === x.hi`\n *\n * @example\n * ```typescript\n * Interval.isSingleton(\n *  Interval(2, 2)\n * ) // true\n * Interval.isSingleton(\n *  Interval(2)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\n\nexport function isSingleton(i) {\n  return i.lo === i.hi;\n}\n/**\n * Checks if zero is included in the interval `x`\n *\n * @example\n * ```typescript\n * Interval.zeroIn(\n *   Interval(-1, 1)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\n\nexport function zeroIn(i) {\n  return hasValue(i, 0);\n}\n/**\n * Checks if `value` is included in the interval `x`\n *\n * @example\n * ```typescript\n * Interval.hasValue(\n *   Interval(-1, 1),\n *   0\n * ) // true\n * Interval.hasValue(\n *   Interval(-1, 1),\n *   10\n * ) // false\n * ```\n *\n * @param {Interval} i\n * @param {number} value\n * @returns {boolean}\n */\n\nexport function hasValue(i, value) {\n  if (isEmpty(i)) {\n    return false;\n  }\n\n  return i.lo <= value && value <= i.hi;\n}\n/**\n * Checks if `x` is a subset of `y`\n *\n * @example\n * ```typescript\n * Interval.hasInteravl(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * ) // true\n * Interval.hasInteravl(\n *   Interval(0, 3),\n *   Interval(1, 4)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\n\nexport function hasInterval(x, y) {\n  if (isEmpty(x)) {\n    return true;\n  }\n\n  return !isEmpty(y) && y.lo <= x.lo && x.hi <= y.hi;\n}\n/**\n * Checks if the intervals `x`, `y` overlap i.e. if they share at least one value\n *\n * @example\n * ```typescript\n * Interval.intervalsOverlap(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 2),\n *   Interval(1, 3)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 2),\n *   Interval(2, 3)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 1),\n *   Interval(2, 3)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\n\nexport function intervalsOverlap(x, y) {\n  if (isEmpty(x) || isEmpty(y)) {\n    return false;\n  }\n\n  return x.lo <= y.lo && y.lo <= x.hi || y.lo <= x.lo && x.lo <= y.hi;\n}","map":{"version":3,"mappings":"AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUA,UAAV,CAAqBC,CAArB,EAA2B;EAC/B,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAC,CAACC,EAAT,KAAgB,QAAzC,IAAqD,OAAOD,CAAC,CAACE,EAAT,KAAgB,QAA5E;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUC,OAAV,CAAkBC,CAAlB,EAA6B;EACjC,OAAOA,CAAC,CAACH,EAAF,GAAOG,CAAC,CAACF,EAAhB;AACD;AAED;;;;;;;;;;;;;;;AAcA,OAAM,SAAUG,OAAV,CAAkBD,CAAlB,EAA6B;EACjC,OAAOA,CAAC,CAACH,EAAF,KAAS,CAACK,QAAV,IAAsBF,CAAC,CAACF,EAAF,KAASI,QAAtC;AACD;AAED;;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,WAAV,CAAsBH,CAAtB,EAAiC;EACrC,OAAOA,CAAC,CAACH,EAAF,KAASG,CAAC,CAACF,EAAlB;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUM,MAAV,CAAiBJ,CAAjB,EAA4B;EAChC,OAAOK,QAAQ,CAACL,CAAD,EAAI,CAAJ,CAAf;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUK,QAAV,CAAmBL,CAAnB,EAAgCM,KAAhC,EAA6C;EACjD,IAAIP,OAAO,CAACC,CAAD,CAAX,EAAgB;IACd,OAAO,KAAP;EACD;;EACD,OAAOA,CAAC,CAACH,EAAF,IAAQS,KAAR,IAAiBA,KAAK,IAAIN,CAAC,CAACF,EAAnC;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUS,WAAV,CAAsBX,CAAtB,EAAmCY,CAAnC,EAA8C;EAClD,IAAIT,OAAO,CAACH,CAAD,CAAX,EAAgB;IACd,OAAO,IAAP;EACD;;EACD,OAAO,CAACG,OAAO,CAACS,CAAD,CAAR,IAAeA,CAAC,CAACX,EAAF,IAAQD,CAAC,CAACC,EAAzB,IAA+BD,CAAC,CAACE,EAAF,IAAQU,CAAC,CAACV,EAAhD;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,SAAUW,gBAAV,CAA2Bb,CAA3B,EAAwCY,CAAxC,EAAmD;EACvD,IAAIT,OAAO,CAACH,CAAD,CAAP,IAAcG,OAAO,CAACS,CAAD,CAAzB,EAA8B;IAC5B,OAAO,KAAP;EACD;;EACD,OAAQZ,CAAC,CAACC,EAAF,IAAQW,CAAC,CAACX,EAAV,IAAgBW,CAAC,CAACX,EAAF,IAAQD,CAAC,CAACE,EAA3B,IAAmCU,CAAC,CAACX,EAAF,IAAQD,CAAC,CAACC,EAAV,IAAgBD,CAAC,CAACC,EAAF,IAAQW,CAAC,CAACV,EAApE;AACD","names":["isInterval","x","lo","hi","isEmpty","i","isWhole","Infinity","isSingleton","zeroIn","hasValue","value","hasInterval","y","intervalsOverlap"],"sources":["../../src/operations/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}